{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from \"react\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nlet store;\nconst initialState = {\n  lastUpdate: 0,\n  light: false,\n  count: 0\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"TICK\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lastUpdate: action.lastUpdate,\n        light: !!action.light\n      });\n\n    case \"INCREMENT\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: state.count + 1\n      });\n\n    case \"DECREMENT\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: state.count - 1\n      });\n\n    case \"RESET\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: initialState.count\n      });\n\n    default:\n      return state;\n  }\n};\n\nfunction initStore(preloadedState = initialState) {\n  return createStore(reducer, preloadedState, composeWithDevTools(applyMiddleware()));\n}\n\nexport const initializeStore = preloadedState => {\n  var _store2;\n\n  let _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : initStore(preloadedState); // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n\n\n  if (preloadedState && store) {\n    _store = initStore(_objectSpread(_objectSpread({}, store.getState()), preloadedState)); // Reset the current store\n\n    store = undefined;\n  } // For SSG and SSR always create a new store\n\n\n  if (true) {\n    return _store;\n  } // Create the store once in the client\n\n\n  if (!store) {\n    store = _store;\n  }\n\n  return _store;\n};\nexport function useStore(state) {\n  const myStore = useMemo(() => initializeStore(state), [state]);\n  return myStore;\n}","map":{"version":3,"sources":["/home/justin/workspace/justinwright/store.js"],"names":["useMemo","createStore","applyMiddleware","composeWithDevTools","store","initialState","lastUpdate","light","count","reducer","state","action","type","initStore","preloadedState","initializeStore","_store","getState","undefined","useStore","myStore"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,IAAIC,KAAJ;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,CADO;AAEnBC,EAAAA,KAAK,EAAE,KAFY;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;;AAMA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,MAAL;AACE,6CACKF,KADL;AAEEJ,QAAAA,UAAU,EAAEK,MAAM,CAACL,UAFrB;AAGEC,QAAAA,KAAK,EAAE,CAAC,CAACI,MAAM,CAACJ;AAHlB;;AAKF,SAAK,WAAL;AACE,6CACKG,KADL;AAEEF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AAFvB;;AAIF,SAAK,WAAL;AACE,6CACKE,KADL;AAEEF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AAFvB;;AAIF,SAAK,OAAL;AACE,6CACKE,KADL;AAEEF,QAAAA,KAAK,EAAEH,YAAY,CAACG;AAFtB;;AAIF;AACE,aAAOE,KAAP;AAvBJ;AAyBD,CA1BD;;AA4BA,SAASG,SAAT,CAAmBC,cAAc,GAAGT,YAApC,EAAkD;AAChD,SAAOJ,WAAW,CAChBQ,OADgB,EAEhBK,cAFgB,EAGhBX,mBAAmB,CAACD,eAAe,EAAhB,CAHH,CAAlB;AAKD;;AAED,OAAO,MAAMa,eAAe,GAAID,cAAD,IAAoB;AAAA;;AACjD,MAAIE,MAAM,cAAGZ,KAAH,6CAAYS,SAAS,CAACC,cAAD,CAA/B,CADiD,CAGjD;AACA;;;AACA,MAAIA,cAAc,IAAIV,KAAtB,EAA6B;AAC3BY,IAAAA,MAAM,GAAGH,SAAS,iCACbT,KAAK,CAACa,QAAN,EADa,GAEbH,cAFa,EAAlB,CAD2B,CAK3B;;AACAV,IAAAA,KAAK,GAAGc,SAAR;AACD,GAZgD,CAcjD;;;AACA,YAAmC;AACjC,WAAOF,MAAP;AACD,GAjBgD,CAkBjD;;;AACA,MAAI,CAACZ,KAAL,EAAY;AACVA,IAAAA,KAAK,GAAGY,MAAR;AACD;;AAED,SAAOA,MAAP;AACD,CAxBM;AA0BP,OAAO,SAASG,QAAT,CAAkBT,KAAlB,EAAyB;AAC9B,QAAMU,OAAO,GAAGpB,OAAO,CAAC,MAAMe,eAAe,CAACL,KAAD,CAAtB,EAA+B,CAACA,KAAD,CAA/B,CAAvB;AACA,SAAOU,OAAP;AACD","sourcesContent":["import { useMemo } from \"react\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nlet store;\n\nconst initialState = {\n  lastUpdate: 0,\n  light: false,\n  count: 0,\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"TICK\":\n      return {\n        ...state,\n        lastUpdate: action.lastUpdate,\n        light: !!action.light,\n      };\n    case \"INCREMENT\":\n      return {\n        ...state,\n        count: state.count + 1,\n      };\n    case \"DECREMENT\":\n      return {\n        ...state,\n        count: state.count - 1,\n      };\n    case \"RESET\":\n      return {\n        ...state,\n        count: initialState.count,\n      };\n    default:\n      return state;\n  }\n};\n\nfunction initStore(preloadedState = initialState) {\n  return createStore(\n    reducer,\n    preloadedState,\n    composeWithDevTools(applyMiddleware())\n  );\n}\n\nexport const initializeStore = (preloadedState) => {\n  let _store = store ?? initStore(preloadedState);\n\n  // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n  if (preloadedState && store) {\n    _store = initStore({\n      ...store.getState(),\n      ...preloadedState,\n    });\n    // Reset the current store\n    store = undefined;\n  }\n\n  // For SSG and SSR always create a new store\n  if (typeof window === \"undefined\") {\n    return _store;\n  }\n  // Create the store once in the client\n  if (!store) {\n    store = _store;\n  }\n\n  return _store;\n};\n\nexport function useStore(state) {\n  const myStore = useMemo(() => initializeStore(state), [state]);\n  return myStore;\n}\n"]},"metadata":{},"sourceType":"module"}